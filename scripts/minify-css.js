#!/usr/bin/env node

/**
 * This script is a command line wrapper for `css-min`, which will
 * minify the CSS generated by the IDS Enterprise build system.
 */

// -------------------------------------
// Requirements
// -------------------------------------
import cssmin from 'cssmin';
import _yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

import logger from './logger.js';
import getFileContents from './build/get-file-contents.js';
import writeFile from './build/write-file.js';

import config from './configs/cssmin';

const argv = _yargs(hideBin(process.argv)).argv;

// -------------------------------------
// Functions
// -------------------------------------

function minify(srcFilePath, targetFilePath) {
  const css = getFileContents(srcFilePath);
  const minified = cssmin(css);
  return writeFile(targetFilePath, minified).then((err) => {
    if (err) {
      logger('error', `Error minifying "${srcFilePath}": ${err}`);
      return;
    }
    // Only log if not in --verbose mode (file logger has more detailed results)
    if (!argv.verbose) {
      logger('success', `Successfully minified "${targetFilePath}"`);
    }
  });
}

function minifyCSS() {
  return new Promise((resolve, reject) => {
    if (!config.cssmin.dist || !config.cssmin.dist.files) {
      throw new Error('Need to have target CSS files passed in for minifier');
    }

    const files = Object.keys(config.dist.files);
    const processes = [];

    files.forEach((targetFileName) => {
      const srcFileName = config.cssmin.dist.files[targetFileName][0];
      processes.push(minify(srcFileName, targetFileName));
    });

    return Promise.all(processes).then(() => {
      resolve();
    }).catch((e) => {
      reject(e);
    });
  });
}

// -------------------------------------
// Main
// -------------------------------------
export default minifyCSS;
